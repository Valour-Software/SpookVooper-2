@using SV2.Database;
@using SV2.Database.Models.Districts;
@model SV2.Database.Models.Districts.District

@{ 
    if (Model != null)
    {
        ViewData["Title"] = Model.Name;
    }
    SVUser? user = UserManager.GetUser(Context);
}

<head>
    <meta property="og:title" content="@Model.Name">
    <meta name="keywords" content="SpookVooper, Vooperia, Districts, Government">
    <meta property="og:description" content="@Model.Description">
    <meta property="og:url" content="https://spookvooper.com/District/View/@Model.Name">
    <style>
        .tooltip-dontshow {
            opacity: 0 !important;
        }
        .tooltip {
            cursor:pointer;
        }
        .tooltip-dontshow {
            opacity: 0 !important;
        }

        .mergedrow {
            width: 25em;
            line-height: 1.2em;
        }

        .dividertop {
            border-top: 1px solid darkgray;
        }

        .infobox {
            border: 1px solid darkgray;
            background-color: rgba(255, 255, 255, 0.1);
            max-width: 300px;
        }

        .infobox-header div {
            text-align: center;
        }

        .infobox-subheader div {
            text-align: center;
        }

        .infobox-row-name {
            padding: 0 0.6em 0.2em 0.6em;
        }

        .mergedrow th {
        }
        .fit-to-content .infobox-row-value {
            display: inline-block;
        }
    </style>
</head>

@{
    string resourcetomap = "";
    if (!Context.Request.Query.TryGetValue("resource", out var _resourcetomap))
        resourcetomap = null;
    else
        resourcetomap = _resourcetomap.ToString();
    if (resourcetomap == "") resourcetomap = null;
}

<!-- Main row for page -->
<div class="d-flex flex-row align-content-center" style="width:100%">
    <!-- Leftmost column -->
    <div class="p-2 flex-shrink-1 ms-auto"></div>

    <!-- Center column -->
    <div class="p-4" style="width:80em">

        @await Html.PartialAsync("_StatusMessage", TempData["StatusMessage"])

        @{
            if (Model is not null)
            {

                <div class="d-flex align-content-center align-items-center">

                    <div class="ms-auto" style="display: inline-block; vertical-align:central; height:100%">
                        <img src="@Model.FlagUrl" style="width:5em; vertical-align:middle" />
                    </div>

                    <div style="display:inline-block; margin:2em;">
                        <h2 style="text-align:center" class="display-4">The District of</h2>
                        <h1 style="text-align:center" class="display-3">@Model.Name</h1>
                    </div>

                    <div class="me-auto" style="display: inline-block; vertical-align:central; height:100%">
                        <img src="@Model.FlagUrl" style="width:5em; vertical-align:middle" />
                    </div>

                </div>

                <br />

                int population = DBCache.GetAll<SVUser>().Count(x => x.DistrictId == Model.Id);

                <div class="p-2 align-self-center" style="text-align:center">
                    <h3>User Population: @population</h3>
                </div>

                @foreach (var staticmodififer in Model.StaticModifiers) {
                    <div class="p-2 align-self-center" style="text-align:center">
                        @{
                            var spanclass = "modifier-icon-good";
                            if (!staticmodififer.BaseStaticModifiersObj.IsGood)
                                spanclass = "modifier-icon-bad";
                        }
                        <span class="@spanclass" data-bs-toggle="tooltip" data-bs-html="true" data-bs-custom-class="modifier-tooltip-div" data-bs-sanitize="false" data-bs-title="@Html.Raw(staticmodififer.GenerateHtmlForTooltip(Model))">@staticmodififer.BaseStaticModifiersObj.Icon</span>
                    </div>
                }

                if (user != null)
                {
                    if (user.DistrictId != null && user.DistrictId == Model.Id)
                    {
                        <div class="p-2 align-self-center" style="text-align:center">
                            <h3>You live here.</h3>
                        </div>
                    }
                    else
                    {
                        <div class="p-2 align-self-center" style="text-align:center">
                            <a asp-controller="District" asp-action="MoveDistrict" asp-route-id="@Model.Id" class="btn btn-outline-primary">Move Here</a>
                        </div>
                    }
                }
                else
                {
                    <div class="p-2 align-self-center" style="text-align:center">
                        <h3>Log in to move!</h3>
                    </div>
                }
                if (user!.Id == Model.GovernorId) {
                    <div class="p-2 align-self-center" style="text-align:center">
                        <a asp-controller="District" asp-action="Manage" asp-route-id="@Model.Id" class="btn btn-outline-primary">Edit</a>
                        <a asp-controller="District" asp-action="EditPolicies" asp-route-id="@Model.Id" class="btn btn-outline-primary">Edit Policies</a>
                        <a asp-controller="District" asp-action="ManageStates" asp-route-id="@Model.Id" class="btn btn-outline-primary">Manage States</a>
                    </div>
                }

                if (user is not null && await user.IsGovernmentAdmin()) {
                    <div class="p-2 align-self-center" style="text-align:center">
                        <button class="btn btn-outline-warning" data-bs-toggle="modal" data-bs-target="#changegovernor">Change Governor</button>
                        <button class="btn btn-outline-warning" data-bs-toggle="modal" data-bs-target="#changesenator">Change Senator</button>
                    </div>
                }
 
                if (Model.Description != null)
                {
                    <h1 style="text-align:left">Description</h1>
                    <p class="p" style="font-size:large">@Html.Raw(MarkdownManager.GetHtml(Model.Description))</p>
                }
                <br />
                <center>
                    @{
                        var devmapmode = Context.Request.QueryString.Value.Contains("devmapmode=true");
                        double maxresource = 0;
                        if (resourcetomap is not null) {
                            maxresource = DBCache.GetAll<Province>().Max(x => x.GetMiningResourceProduction(resourcetomap));
                        }
                    }
                    <a href="/District/View/@Model.Name">
                        <button class='btn @(devmapmode || resourcetomap != null ? "btn-outline-primary" : "btn-primary")'>Normal Mode</button>
                    </a>
                    <a href="/District/View/@Model.Name?devmapmode=true">
                        <button class='btn @(devmapmode ? "btn-primary" : "btn-outline-primary")'>View Development</button>
                    </a>
                    <button class='btn @(resourcetomap is null ? "btn-outline-primary" : "btn-primary")' data-bs-toggle="modal" data-bs-target="#showresources">View Resource Density</button>
                    @if (resourcetomap is not null) {
                        <p>Currently showing resource density for @resourcetomap</p>
                    }
                    <div class="window" id="window" style="margin-top: 15px;">
                        @{
                            SV2.Models.Map.DistrictMap mapdata = MapController.DistrictMaps.First(x => x.DistrictId == Model.Id);
                        }
                        <svg id="svg" viewBox="@(mapdata.LowestXPos-10) @(mapdata.LowestYPos) @((mapdata.HighestXPos-mapdata.LowestXPos)+30) @((mapdata.HighestYPos-mapdata.LowestYPos)+25)"
                             style="/* transform: scale(0.75);transform-origin: 50% 0%; */width: 75%;height: 75%;">
                            <style>
                                path {
                                    fill: white;
                                    stroke: black;
                                    stroke-width: 0.5px;
                                }

                                path:hover {
                                    /* filter: brightness(0.75); */
                                    stroke-width: 1.5px;
                                }
                                a {
                                    text-decoration: none;
                                }
                                .city-name-2 {
                                    text-decoration: none;
                                    font-size: 5px;
                                    color: purple;
                                    fill: currentColor;
                                }
                                .city-name {
                                    border-radius: 0.9px;
                                    font-size: 4.75px;
                                    padding: 0px;
                                }
                            </style>
                            @foreach (var province in mapdata.Provinces)
                            {
                                var dbprovince = DBCache.Get<Province>(province.Id);
                                bool ShowCityCircle = false;
                                if ((dbprovince.CurrentDevelopmentStage.Name == "City" || dbprovince.CurrentDevelopmentStage.Name == "Megacity") && dbprovince.Name != "")
                                {
                                    ShowCityCircle = true;
                                }
                                @if (resourcetomap is not null) {
                                    var buildingobj = GameDataManager.BaseBuildingObjs.Values.First(x => x.MustHaveResource == resourcetomap);
                                    var production = $"{dbprovince.GetMiningResourceProduction(resourcetomap) / 10550.0 * buildingobj.Recipes.First().PerHour * buildingobj.Recipes.First().Outputs.First().Value:n2}";
                                    <a href="/Province/View/@province.Id" data-bs-toggle="tooltip" data-placement="top" title="@production @(resourcetomap.ToLower())/h" data-sv-show="@ShowCityCircle">
                                        <path d="@province.D" id="@province.Id" style="fill:@dbprovince.GetMapColorForResourceDensity(maxresource, resourcetomap)" class="province"></path>
                                        @if (ShowCityCircle)
                                        {
                                            <circle cx="@(province.XPos)" cy="@(province.YPos+8)" r="3" style="fill: white;" />
                                        }
                                    </a>
                                }
                                else if (!Context.Request.QueryString.Value.Contains("devmapmode=true"))
                                {
                                    <a href="/Province/View/@province.Id" data-bs-toggle="tooltip" data-placement="top" title="@dbprovince.Name" data-sv-show="@ShowCityCircle">
                                        <path d="@province.D" id="@province.Id" style="fill:#@province.GetMapColor();" class="province"></path>
                                        @if (ShowCityCircle)
                                        {
                                            <circle cx="@(province.XPos+4)" cy="@(province.YPos+8)" r="3" style="fill: white;" />
                                        }
                                    </a>
                                }
                                else
                                {
                                        
                                    <a href="/Province/View/@province.Id" data-bs-toggle="tooltip" data-placement="top" title="@dbprovince.Name" data-sv-show="@ShowCityCircle">
                                        <path d="@province.D" id="@province.Id" style="fill:@dbprovince.GetDevelopmentColorForMap()" class="province"></path>
                                        @if (ShowCityCircle)
                                        {
                                            <circle cx="@(province.XPos)" cy="@(province.YPos+8)" r="3" style="fill: white;" />
                                        }
                                    </a>
                                }
                            }

                            @if (false)
                            {
                                //foreach (var province in mapdata.Provinces)
                              //  {
                               //     var dbprovince = DBCache.Get<Province>(province.Id);
                               //     if (dbprovince.CurrentDevelopmentStage.Name == "City")
                              //      {
                            //            <foreignObject x="@(province.XPos-17)" y="@(province.YPos-3)" width="38" height="7.2">
                               //             <div class="tooltip-inner city-name">New Voopris City</div>
                                //        </foreignObject>
                               //     }
                               // }
                            }
                        </svg>
                    </div>
                </center>
            } 
            else
            {
                <h1 style="text-align:center" class="display-4">District not found!</h1>
            }
        }
    </div>

    <!-- Rightmost column -->
    <div class="p-4 flex-shrink-1 me-auto" style="margin-top: 2em;">
        <table class="infobox">
            <tbody>
                <tr>
                    <th colspan="2" class="infobox-header">
                        <div>@Model.Name</div>
                    </th>
                </tr>
                <tr>
                    <td colspan="2" class="infobox-subheader">
                        <div>District</div>
                    </td>
                </tr>
                <tr class="mergedrow dividertop">
                    <th class="infobox-row-name">Governor</th>
                    @if (Model.Governor is null) {
                        <td class="infobox-row-value">None</td>
                    }
                    else {
                        <td class="infobox-row-value">
                            <a asp-controller="User" asp-action="Info" asp-route-id="@Model.GovernorId">@Model.Governor.Name</a>
                        </td>
                    }
                </tr>
                <tr class="mergedrow">
                    <th class="infobox-row-name">Senator</th>
                    @if (Model.Senator is null)
                    {
                        <td class="infobox-row-value">None</td>
                    }
                    else
                    {
                        <td class="infobox-row-value">
                            <a asp-controller="User" asp-action="Info" asp-route-id="@Model.Senator.UserId">@Model.Senator.User.Name</a>
                        </td>
                    }
                </tr>
                <tr class="mergedrow dividertop">
                    <th class="infobox-row-name">Population</th>
                    <td class="infobox-row-value">@($"{Model.TotalPopulation:n0}")</td>
                </tr>
                <tr>
                    <td colspan="2" class="infobox-subheader">
                        <div>@Model.TitleForState.Pluralize()</div>
                    </td>
                </tr>
                @{
                    var _class = "mergedrow fit-to-content dividertop";
                }
                @foreach (var state in Model.States) {
                    <tr class="@_class">
                        <th class="infobox-row-name">
                            <a href="/State/View/@state.Id">@state.Name</a>
                        </th>
                        <td class="infobox-row-value">
                            <div style="width:16px;height:16px;background-color:#@state.MapColor;"></div>
                        </td>
                        <td class="infobox-row-value" style="margin-left:12px;">
                            @($"{(state.Population):n0}")
                        </td>
                    </tr>
                    _class = "mergedrow fit-to-content";
                }
                
            </tbody>
        </table>
        <a target="_blank" href="https://dev.spookvooper.com/wiki/District">Wiki page for Districts</a>
    </div>
</div>

<bootstrap-modal asp-modal-id="showresources" asp-modal-title="View Resource Density">
    <center>
        <span>Click below to view the density map for that resource.</span>
        <br />
        <br />
        @{
            var i = 0;
        }
        @foreach (var building in GameDataManager.BaseBuildingObjs.Values.Where(x => x.MustHaveResource is not null)) {
            @if (i == 3)
            {
                <br />
                i = 0;
            }
            <a href="/District/View/@Model.Name?resource=@building.MustHaveResource">
                <button style="margin-bottom: 10px;" class='btn @(resourcetomap == building.MustHaveResource ? "btn-primary" : "btn-outline-primary")'>@building.MustHaveResource.Replace("_", " ")</button>
            </a>
            i += 1;
        }
    </center>
</bootstrap-modal>

@if (user is not null && await user.IsGovernmentAdmin())
{
    <bootstrap-modal asp-modal-id="changegovernor" asp-modal-title="Change Governor">
        <!form method="post" action="/District/ChangeGovernor/@Model.Id">
            @Html.AntiForgeryToken()
            <div class="col-12 align-content-center text-center" style="margin-left: auto;margin-right: auto;max-width: 500px;">
                <p>Governor Entity's name</p>
                <input data-val="true" data-val-required="The Id field is required." id="GovernorId" name="GovernorId" type="hidden" value="@Model.GovernorId">
                <div class="input-group" style="max-width:700px;margin-left:auto;margin-right:auto;">
                    <input style="margin-bottom:20px; display:inline-block; max-width:500px;" id="user-input" class="form-control" value="@(Model.Governor?.Name ?? "")" />
                    <div class="input-group-append">
                        <button id="submit" class="btn btn-outline-warning" style="display:inline-block;margin-bottom:20px">Confirm</button>
                    </div>
                </div>
                <span id="svid-text" class="text-warning">Id of entity selected: </span>
                <br />
                <span id="name-text" class="text-warning">Name of entity selected: </span>

                <div id="results" style="margin-top:20px">
                </div>
            </div>
        </!form>
    </bootstrap-modal>
    <bootstrap-modal asp-modal-id="changesenator" asp-modal-title="Change Senator">
        <!form method="post" action="/District/ChangeSenator/@Model.Id">
            @Html.AntiForgeryToken()
        <div class="col-12 align-content-center text-center" style="margin-left: auto;margin-right: auto;max-width: 500px;">
            <p>Senator User's name</p>
            <input data-val="true" data-val-required="The Id field is required." id="SenatorId" name="SenatorId" type="hidden" value="@(Model.Senator?.UserId)">
            <div class="input-group" style="max-width:700px;margin-left:auto;margin-right:auto;">
                <input style="margin-bottom:20px; display:inline-block; max-width:500px;" id="user-input2" class="form-control" value="@(Model.Senator?.User.Name ?? "")" />
                <div class="input-group-append">
                    <button id="submit" class="btn btn-outline-warning" style="display:inline-block;margin-bottom:20px">Confirm</button>
                </div>
            </div>
            <span id="svid-text2" class="text-warning">Id of entity selected: </span>
            <br />
            <span id="name-text2" class="text-warning">Name of entity selected: </span>

            <div id="results2" style="margin-top:20px">
            </div>
        </div>
        </!form>
    </bootstrap-modal>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        $('#user-input').on("change keyup paste", OnInput);
        var box = $('#user-input');
        var results = $('#results');
        var svid_text = $('#svid-text');
        var name_text = $('#name-text');
        var id_input = $('#GovernorId');
        var selected = "";
        var last = "";
        var cur = [];
        function OnInput() {
            var name = box.val();
            if (name != last) {
                last = name;
                $.getJSON("/api/entity/search?name=" + name, function (data) {
                    if (data != null) {
                        results.empty();
                        data.forEach(result => console.log(result));
                        data.forEach(result => new function () {
                            console.log(result);
                            var add = "<div id='" + result.id + "' style='margin:5px'><img class='smallpfp' style='display: inline-block' src='" + result.imageUrl + "' onerror='fiximg(this)'><h5 style='display: inline-block; padding:5px'>" + result.name + "</h5></div>";
                            results.prepend(add);
                            var element = $('#' + result.id);
                            cur.push(element);
                            element.click(function () {
                                cur.forEach(ele => new function () {
                                    ele.css("background-color", "rgba(0, 0, 0, 0)");
                                });
                                element.css("background-color", "rgba(0, 255, 0, 0.1)");
                                svid_text.text("Id of Entity Currently Selected: " + result.id);
                                name_text.text("Name of Entity Currently Selected: " + result.name);
                                id_input.val(result.id);
                                selected = result.id;
                            });
                        }
                        );
                    }
                }).fail(function () { });
            }
        }
        function fiximg(c) {
            c.onerror = '';
            c.src = '/media/unity-128.png';
        }

        $('#user-input2').on("change keyup paste", OnInput2);
        var box2 = $('#user-input2');
        var results2 = $('#results2');
        var svid_text2 = $('#svid-text2');
        var name_text2 = $('#name-text2');
        var id_input2 = $('#SenatorId');
        var selected2 = "";
        var last2 = "";
        var cur2 = [];
        function OnInput2() {
            var name2 = box2.val();
            if (name2 != last2) {
                last2 = name2;
                $.getJSON("/api/entity/search?name=" + name2, function (data) {
                    if (data != null) {
                        results2.empty();
                        data.forEach(result => console.log(result));
                        data.forEach(result => new function () {
                            console.log(result);
                            var add = "<div id='" + result.id + "' style='margin:5px'><img class='smallpfp' style='display: inline-block' src='" + result.imageUrl + "' onerror='fiximg(this)'><h5 style='display: inline-block; padding:5px'>" + result.name + "</h5></div>";
                            results2.prepend(add);
                            var element = $('#' + result.id);
                            cur2.push(element);
                            element.click(function () {
                                cur2.forEach(ele => new function () {
                                    ele.css("background-color", "rgba(0, 0, 0, 0)");
                                });
                                element.css("background-color", "rgba(0, 255, 0, 0.1)");
                                svid_text2.text("Id of Entity Currently Selected: " + result.id);
                                name_text2.text("Name of Entity Currently Selected: " + result.name);
                                id_input2.val(result.id);
                                selected2 = result.id;
                            });
                        }
                        );
                    }
                }).fail(function () { });
            }
        }
    </script>
}

<script>
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = []
    for (i = 0; i < tooltipTriggerList.length;i++) {
        el = tooltipTriggerList[i]
        if (el.getAttribute("data-sv-show") == "True") {
            el.setAttribute("data-bs-trigger", "manual")
            el.setAttribute("data-bs-offset", "0, -22")
            e = new bootstrap.Tooltip(el)
            tooltipList.push(e)
            e.show()
            if (false) 
            {
                e.tip.addEventListener("mouseleave", function (event) {
                    event.currentTarget.classList.remove("tooltip-dontshow");
                }, false);

                e.tip.addEventListener("mouseover", function (event) {
                    event.currentTarget.classList.add("tooltip-dontshow");
                }, false);
            }
            if (true) {
                e.tip.addEventListener("mouseup", function (event) {
                    event.currentTarget.style += "display:none;";
                }, false);
            }
        }
        else {
            e = new bootstrap.Tooltip(el)
            tooltipList.push(e)
        }
    }

    //function AuxClickedProvince(event) {
   //     var target = event.target || event.srcElement;
    //    if (e.button == 1) {
   //         var myModal = new bootstrap.Modal(document.getElementById('myModal'), options)
  //      }
   // }
</script>