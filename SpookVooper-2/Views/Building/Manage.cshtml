@using SV2.Database.Managers
@model BuildingManageModel

@{
    ViewData["Title"] = "Building Admin";

    SVUser user = UserManager.GetUser(Context)!;
}

<style>
    .tooltip-dontshow {
        opacity: 0 !important;
    }

    .mergedrow {
        width: 25em;
        line-height: 1.2em;
    }

    .dividertop {
        border-top: 1px solid darkgray;
    }

    .infobox {
        border: 1px solid darkgray;
        background-color: rgba(255, 255, 255, 0.1);
        max-width: 300px;
    }

    .infobox-header div {
        text-align: center;
    }

    .infobox-subheader div {
        text-align: center;
    }

    .infobox-row-name {
        padding: 0 0.6em 0.2em 0.6em;
    }

    .mergedrow th {
    }
</style>

<div class="d-flex flex-row align-content-center" style="width:100%">
    <!-- Leftmost column -->
    <div class="p-2 flex-shrink-1 ms-auto"></div>

    <div class="p-4" style="width:80em">

        @await Html.PartialAsync("_StatusMessage", TempData["StatusMessage"])

        <h3 style="text-align:center">@ViewData["Title"]</h3>
        <h2 style="text-align:center">@Model.Building.Name</h2>

        <div class="row">
            <div class="col-4"></div>
            <div class="col-4">

            </div>
            <div class="col-4"></div>
        </div>

        <br />
        <hr />
        @if (user.Id == Model.Building.OwnerId || Model.Building.Owner.HasPermission(user, GroupPermissions.ManageBuildings)) {
            <center>
                <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#createbuildingrequest">
                    <span>Build more levels</span>
                </button>
            </center>
        }
        <br />
        <form method="post">
            <div class="col-12 align-content-center text-center" style="margin-left: auto;margin-right: auto;max-width: 500px;">
                @Html.HiddenFor(x => x.BuildingId)
                <div class="row">
                    <h4>Building Info</h4>

                    <div asp-validation-summary="All" class="text-danger"></div>
                </div>

                <div class="form-group">
                    <label>Name</label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <br />

                <div class="form-group">
                    <label>Description</label>
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                <br />

                <div class="form-group">
                    <label>Recipe</label>
                    <span>View list of all recipes <a target="_blank" href="https://dev.spookvooper.com/wiki/List_of_Recipes">here</a></span>
                    <select asp-for="RecipeId" asp-items="Model.Building.BuildingObj.Recipes.Select(x => new Microsoft.AspNetCore.Mvc.Rendering.SelectListItem { Value = x.Id, Text = x.Name })" class="form-select form-control"></select>
                    <span asp-validation-for="RecipeId" class="text-danger"></span>
                </div>
                <br />
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </div>
        </form>
        <br />

        <br />
        <br />
    </div>

    <!-- Rightmost column -->
    <div class="p-4 flex-shrink-1 me-auto" style="margin-top: 2em;">
        <table class="infobox">
            <tbody>
                <tr>
                    <th colspan="2" class="infobox-header">
                        <div>@Model.Building.Name</div>
                    </th>
                </tr>
                <tr>
                    <td colspan="2" class="infobox-subheader">
                        <div>@Model.Building.BuildingType.ToString()</div>
                    </td>
                </tr>
                <tr class="mergedrow dividertop">
                    <th class="infobox-row-name">@Model.Building.District.NameForProvince</th>
                    <td class="infobox-row-value">
                        <a href="/Province/View/@Model.Building.ProvinceId">
                            <span>@Model.Building.Province.Name</span>
                        </a>
                   </td>
                </tr>
                <tr class="mergedrow">
                    <th class="infobox-row-name">District</th>
                    <td class="infobox-row-value">
                        <a href="/District/View/@Model.Building.District.Name">@Model.Building.District.Name</a>
                    </td>
                </tr>
                <tr class="mergedrow">
                    <th class="infobox-row-name">Owner</th>
                    <td class="infobox-row-value">
                        @if (Model.Building.Owner.EntityType == EntityType.User) {
                            <a asp-controller="User" asp-action="Info" asp-route-id="@Model.Building.OwnerId">@Model.Building.Owner.Name</a>
                        }
                        else {
                            <a asp-controller="Group" asp-action="View" asp-route-id="@Model.Building.OwnerId">@Model.Building.Owner.Name</a>
                        }
                    </td>
                </tr>
                <tr class="mergedrow">
                    <th class="infobox-row-name">Efficiency</th>
                    <td class="infobox-row-value">@($"{1/Model.Building.Efficiency:n2}")x input</td>
                </tr>
                @if (Model.Building.BuildingType != BuildingType.Infrastructure)
                {
                    <tr class="mergedrow">
                        <th class="infobox-row-name">QuantityCap</th>
                        <td class="infobox-row-value">@(
                        $"{Model.Building.QuantityCap * 100:n2}%"
                        )</td>
                    </tr>
                    <tr class="mergedrow">
                        <th class="infobox-row-name">Daily Quantity Growth</th>
                        <td class="infobox-row-value">@(
                        $"{Model.Building.QuantityHourlyGrowth * 100 * 24:n2}%"
                        )</td>
                    </tr>
                    <tr class="mergedrow">
                        <th class="infobox-row-name">Quantity</th>
                        <td class="infobox-row-value">
                            @($"{Model.Building.Quantity * 100:n2}%")
                        </td>
                    </tr>
                }
                <tr class="mergedrow">
                    <th class="infobox-row-name">Throughput</th>
                    <td class="infobox-row-value has-expanded-info" data-bs-toggle="modal" data-bs-target="#ThroughputModal">@($"{Model.Building.ThroughputFactor:n2}")x</td>
                </tr>
                <tr class="mergedrow">
                    <th class="infobox-row-name">Levels</th>
                    <td class="infobox-row-value">@Model.Building.Size</td>
                </tr>
                <tr class="mergedrow">
                    <th class="infobox-row-name">Times Recipe Executed per hour</th>
                    <td class="infobox-row-value">@($"{Model.Building.GetRateForProduction():n1}")</td>
                </tr>
                <tr class="mergedrow">
                    <th class="infobox-row-name">Recipe</th>
                    <td class="infobox-row-value">@Model.Building.Recipe.Name</td>
                </tr>
                <tr class="mergedrow dividertop">
                    <td colspan="2" class="infobox-subheader">
                        <div>Resources consumed daily</div>
                    </td>
                </tr>
                @{
                    double rate = Model.Building.GetRateForProduction();
                    rate *= 24;
                    if (!Model.Building.Recipe.Inputcost_Scaleperlevel)
                        rate /= Model.Building.Size;
                    double rate_for_input = rate * (1 / Model.Building.Efficiency);
                    string trclass = "mergedrow dividertop";
                }
                @foreach ((var resource, var amount) in Model.Building.Recipe.Inputs) {
                    <tr class="@trclass">

                        <th class="infobox-row-name">@($"{resource.Replace('_',' ')}")</th>
                        <td class="infobox-row-value">@($"{rate_for_input*amount:n1}")</td>
                    </tr>
                    trclass = "mergedrow";
                }
                @if (Model.Building.Recipe.Outputs is not null && Model.Building.Recipe.Outputs.Count > 0)
                {
                    <tr class="mergedrow dividertop">
                        <td colspan="2" class="infobox-subheader">
                            <div>Resources produced daily</div>
                        </td>
                    </tr>
                    @foreach ((var resource, var amount) in Model.Building.Recipe.Outputs)
                    {
                        <tr class="@trclass">

                            <th class="infobox-row-name">@($"{resource.Replace('_', ' ')}")</th>
                            @if (Model.Building.BuildingObj.type == SV2.Database.Models.Buildings.BuildingType.Mine)
                            {
                                <td class="infobox-row-value">@(
                                  $"{rate * amount * Model.Building.MiningOutputFactor():n1}"
                                  )</td>
                            }
                            else
                            {
                                <td class="infobox-row-value">@($"{rate * amount:n1}")</td>
                            }
                        </tr>
                        trclass = "mergedrow";
                    }
                }
            </tbody>
        </table>
    </div>

    <bootstrap-modal asp-modal-id="createbuildingrequest" asp-modal-title="Request more Levels">
        @await Html.PartialAsync("/Views/Shared/Components/SubmitBuildingRequest.cshtml", Model.createBuildingRequestModel)
    </bootstrap-modal>

    <bootstrap-modal asp-modal-id="ThroughputModal" asp-modal-title="Throughput">
        <span>Note, most values with "x" stack additivity! The final value may be slightly different than the actual number due to rounding.</span>
        <table class="table table-dark table-striped">
            <tbody>
                @{
                    double runningtotal = 1;
                    <tr>
                        <td>Base</td>
                        <td></td>
                        <td>1x</td>
                    </tr>

                    if (Model.Building.BuildingObj.ApplyStackingBonus)
                    {
                        double EconomicsofScale = Defines.NProduction["STACKING_THROUGHPUT_BONUS"] * Model.Building.Size;
                        bool IsMaxed = false;
                        if (EconomicsofScale >= Defines.NProduction["MAX_STACKING_THROUGHPUT_BONUS"])
                        {
                            EconomicsofScale = Defines.NProduction["MAX_STACKING_THROUGHPUT_BONUS"];
                            IsMaxed = true;
                        }
                        runningtotal += EconomicsofScale;

                        <tr>
                            <td>
                                <span>Stacking Bonus</span>
                                @if (IsMaxed)
                                {
                                    <span> (maxed)</span>
                                }
                            </td>
                            <td>+@(
                                   $"{EconomicsofScale:n2}"
                                   )</td>
                            <td>@(
                                    $"{runningtotal:n2}"
                                    )</td>
                        </tr>
                    }

                    double runningtotalforstacking = 1;
                    var provincetypestoget = new List<ProvinceModifierType?>() { ProvinceModifierType.AllProducingBuildingThroughputFactor };
                    provincetypestoget.Add(Model.Building.BuildingType switch
                    {
                        BuildingType.Mine => ProvinceModifierType.MineThroughputFactor,
                        BuildingType.Factory => ProvinceModifierType.FactoryThroughputFactor,
                        BuildingType.Farm => ProvinceModifierType.FarmThroughputFactor,
                        BuildingType.Infrastructure => ProvinceModifierType.InfrastructureThroughputFactor
                    });


                    @foreach (var item in Model.Building.Province.GetStaticModifiersOfTypes(provincetypestoget, null, false))
                    {
                        runningtotalforstacking += item.value - 1;
                        <tr>
                            <td>@item.modifiername</td>
                            <td>+@($"{item.value:n2}")</td>
                            <td>@($"{runningtotal * runningtotalforstacking:n2}")</td>
                        </tr>
                    }

                    runningtotal *= runningtotalforstacking;


                    runningtotalforstacking = 1;
                    var districttypestoget = new List<DistrictModifierType?>() { DistrictModifierType.AllProducingBuildingThroughputFactor };
                    districttypestoget.Add(Model.Building.BuildingType switch
                    {
                        BuildingType.Mine => DistrictModifierType.MineThroughputFactor,
                        BuildingType.Factory => DistrictModifierType.FactoryThroughputFactor,
                        BuildingType.Farm => DistrictModifierType.FarmThroughputFactor,
                        BuildingType.Infrastructure => DistrictModifierType.InfrastructureThroughputFactor
                    });

                    @foreach (var item in Model.Building.Province.GetStaticModifiersOfTypes(null, districttypestoget, true, false))
                    {
                        runningtotalforstacking += item.value;
                        <tr>
                            <td>@item.modifiername</td>
                            <td>+@($"{item.value:n2}")</td>
                            <td>@($"{runningtotal * runningtotalforstacking:n2}")</td>
                        </tr>
                    }

                    runningtotalforstacking = 1;
                    var state = new ExecutionState(Model.Building.District, Model.Building.Province, parentscopetype: ScriptScopeType.Building, building: Model.Building);
                    @foreach (var item in Model.Building.StaticModifiers.Where(x => x.BaseStaticModifiersObj.ModifierNodes.Any(n => n.buildingModifierType == BuildingModifierType.ThroughputFactor)))
                    {
                        var node = item.BaseStaticModifiersObj.ModifierNodes.FirstOrDefault(x => x.buildingModifierType == BuildingModifierType.ThroughputFactor);
                        runningtotalforstacking += (double)node.GetValue(state);
                        <tr>
                            <td>@item.BaseStaticModifiersObj.Name</td>
                            <td>+@($"{node.GetValue(state):n2}")</td>
                            <td>@($"{runningtotal * runningtotalforstacking:n2}")</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </bootstrap-modal>

    @section Scripts {
        @await Html.PartialAsync("_ValidationScriptsPartial")
    }
</div>